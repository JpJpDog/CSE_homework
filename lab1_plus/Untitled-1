// yfs client.  implements FS operations using extent and lock server
#include "yfs_client.h"
#include "extent_client.h"
#include "extent_protocol.h"
#include <sstream>
#include <iostream>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

void freeEntryList(EntryNode *e)
{
	EntryNode *tmp = e;
	while (e)
	{
		tmp = e->next;
		free(e);
		e = tmp;
	}
}

yfs_client::yfs_client()
{
	ec = new extent_client();
	for (int i = 0; i < TCACHEN; i++)
		typeCache[i].inum = 0;
	for (int i = 0; i < DCACHEN; i++)
		dirCache[i].inum = 0;
}

yfs_client::yfs_client(std::string extent_dst, std::string lock_dst)
{
	ec = new extent_client();
	if (ec->put(1, "") != extent_protocol::OK)
		printf("error init root dir\n"); // XYB: init root dir
}

yfs_client::inum yfs_client::n2i(std::string n)
{
	std::istringstream ist(n);
	unsigned long long finum;
	ist >> finum;
	return finum;
}

int yfs_client::getType(inum inum)
{
	// printf("get type\n");
	int key = inum % TCACHEN;
	TypeCache cache = typeCache[key];
	if (cache.inum == inum)
		return cache.type;
	else
	{
		cache.inum = inum;
		extent_protocol::attr attr;
		if (ec->getattr(inum, attr) != extent_protocol::OK)
		{
			printf("error getting attr\n");
			return false;
		}
		cache.type = attr.type;
		typeCache[key] = cache;
		return cache.type;
	}
}

int yfs_client::getfile(inum inum, fileinfo &fin)
{
	int r = OK;
	extent_protocol::attr a;
	if (ec->getattr(inum, a) != extent_protocol::OK)
	{
		r = IOERR;
		goto release;
	}
	fin.atime = a.atime;
	fin.mtime = a.mtime;
	fin.ctime = a.ctime;
	fin.size = a.size;
release:
	return r;
}

int yfs_client::getdir(inum inum, dirinfo &din)
{
	int r = OK;
	extent_protocol::attr a;
	if (ec->getattr(inum, a) != extent_protocol::OK)
	{
		r = IOERR;
		goto release;
	}
	din.atime = a.atime;
	din.mtime = a.mtime;
	din.ctime = a.ctime;
release:
	return r;
}

#define EXT_RPC(xx)                                                \
	do                                                             \
	{                                                              \
		if ((xx) != extent_protocol::OK)                           \
		{                                                          \
			printf("EXT_RPC Error: %s:%d \n", __FILE__, __LINE__); \
			r = IOERR;                                             \
			goto release;                                          \
		}                                                          \
	} while (0)

int yfs_client::setattr(inum ino, size_t size)
{
	ec->put(ino, "", size, 1);
	return OK;
}

int yfs_client::kreate(inum parent, const char *name, int file_type, inum &ino_out) //AAAAA
{
	// printf("### create in %d\n", parent);
	EntryNode *entryList = NULL;
	int fileN;
	readdir(parent, &entryList, &fileN);
	EntryNode *p = entryList;
	while (p)
	{
		if (strcmp(p->entry.name, name) == 0)
			return EXIST;
		p = p->next;
	}
	extent_protocol::extentid_t id;
	ec->create(file_type, id);
	ino_out = id;

	int key = parent % DCACHEN;
	dirCache[key].fileN++;
	EntryNode *eNode = new EntryNode;
	strncpy(eNode->entry.name, name, 80);
	eNode->entry.inum = id;
	eNode->next = dirCache[key].entryList;
	dirCache[key].entryList = eNode;

	std::string buf;
	buf.assign((char *)eNode, ENTRY_SIZE);
	ec->put(parent, buf, ENTRY_SIZE * fileN);
	return OK;
}

int yfs_client::create(inum parent, const char *name, mode_t mode, inum &ino_out)
{
	return kreate(parent, name, extent_protocol::T_FILE, ino_out);
}

int yfs_client::mkdir(inum parent, const char *name, mode_t mode, inum &ino_out)
{
	return kreate(parent, name, extent_protocol::T_DIR, ino_out);
}

int yfs_client::mklink(inum parent, const char *name, const char *link, inum &ino_out)
{
	int status;
	if ((status = kreate(parent, name, extent_protocol::T_LINK, ino_out)) != extent_protocol::OK)
		return status;
	ec->put(ino_out, std::string(link));
	return status;
}

int yfs_client::lookup(inum parent, const char *name, bool &found, inum &ino_out) //AAAAA
{
	// printf("### look up\n");
	int type = getType(parent);
	if (type != extent_protocol::T_DIR)
		return IOERR;
	EntryNode *p = NULL;
	int fileN;
	readdir(parent, &p, &fileN);
	found = false;
	while (p)
	{
		if (strcmp(p->entry.name, name) == 0)
		{
			ino_out = p->entry.inum;
			found = true;
			break;
		}
		p = p->next;
	}
	return OK;
}

int yfs_client::readdir(inum dir, EntryNode **entryList, int *fileN1) //AAAAA
{
	// printf("read dir \n");
	int key = dir % DCACHEN;
	if (dirCache[key].inum == dir)
	{
		*fileN1 = dirCache[key].fileN;
		*entryList = dirCache[key].entryList;
		return OK;
	}
	freeEntryList(dirCache[key].entryList);
	std::string buf;
	ec->get(dir, buf);
	Entry *e = (Entry *)buf.c_str();
	int fileN = buf.size() / ENTRY_SIZE;
	EntryNode *entryHead = NULL;
	for (int i = 0; i < fileN; i++)
	{
		EntryNode *eNode = new EntryNode;
		strncpy(eNode->entry.name, e[i].name, 80); //A
		eNode->entry.inum = e[i].inum;			   //A
		eNode->next = entryHead;				   //A
		entryHead = eNode;
	}
	dirCache[key].inum = dir;			 //A
	dirCache[key].fileN = fileN;		 //A
	dirCache[key].entryList = entryHead; //A
	*entryList = entryHead;
	*fileN1 = fileN;
	return OK;
}

int yfs_client::read(inum ino, size_t size, off_t off, std::string &data)
{
	// printf("read\n");
	ec->get(ino, data, size, off);
	return OK;
}

int yfs_client::write(inum ino, size_t size, off_t off, const char *data, size_t &bytes_written)
{
	// printf("write\n");
	std::string buf;
	buf.assign(data, size);
	ec->put(ino, buf, off);
	return OK;
}

int yfs_client::unlink(inum parent, const char *name) //AAAAA
{
	// printf("### unlink %d\n", parent);
	int key = parent % DCACHEN;
	EntryNode *entryList = NULL;
	if (dirCache[key].inum != parent)
	{
		int fileN;
		readdir(parent, &entryList, &fileN);
	}
	else
		entryList = dirCache[key].entryList;
	bool found = false;
	EntryNode *p = entryList, *prevP = NULL;
	while (p)
	{
		if (strcmp(p->entry.name, name) == 0)
		{
			if (prevP == NULL)
			{
				entryList = NULL;
			}
			else
				prevP->next = p->next;
			free(p);
			dirCache[key].fileN--;
			found = true;
			inum deleteInum = p->entry.inum;
			int key = deleteInum % TCACHEN;
			TypeCache cache = typeCache[key];
			if (cache.inum == deleteInum)
				typeCache[key].inum = 0;
			ec->remove(deleteInum);
			break;
		}
		prevP = p;
		p = p->next;
	}
	int fileN = dirCache[key].fileN;
	if (fileN == 0)
	{
		ec->put(parent, "", 0, 1);
	}
	else
	{
		char *tmp = (char *)malloc(fileN * ENTRY_SIZE);
		char *t = tmp;
		EntryNode *p = entryList;
		while (p)
		{
			memcpy(t, (char *)&(p->entry), ENTRY_SIZE);
			t += ENTRY_SIZE;
			p = p->next;
		}
		std::string buf;
		buf.assign(tmp, fileN * ENTRY_SIZE);
		ec->put(parent, buf, 0, 1);
	}
	return OK;
}
